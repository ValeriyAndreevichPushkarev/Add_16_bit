
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611fc, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/add_test_4/test_add_4.v
Parsing SystemVerilog input from `/openlane/designs/add_test_4/test_add_4.v' to AST representation.
Generating RTLIL representation for module `\add_test_4'.
Generating RTLIL representation for module `\add_16'.
Generating RTLIL representation for module `\arithmetics'.
Generating RTLIL representation for module `\converter_16'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/add_test_4/runs/RUN_2023.04.16_12.58.38/tmp/synthesis/hierarchy.dot'.
Dumping module add_test_4 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \add_test_4
Used module:     \add_16
Used module:         \arithmetics

3.2. Analyzing design hierarchy..
Top module:  \add_test_4
Used module:     \add_16
Used module:         \arithmetics
Removing unused module `\converter_16'.
Removed 1 unused modules.
Mapping positional arguments of cell add_16.a8 (arithmetics).
Mapping positional arguments of cell add_16.a7 (arithmetics).
Mapping positional arguments of cell add_16.a6 (arithmetics).
Mapping positional arguments of cell add_16.a5 (arithmetics).
Mapping positional arguments of cell add_16.a4 (arithmetics).
Mapping positional arguments of cell add_16.a3 (arithmetics).
Mapping positional arguments of cell add_16.a2 (arithmetics).
Mapping positional arguments of cell add_16.a1 (arithmetics).
Mapping positional arguments of cell add_test_4.a1 (add_16).

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \add_test_4
Used module:     \add_16
Used module:         \arithmetics

5.2. Analyzing design hierarchy..
Top module:  \add_test_4
Used module:     \add_16
Used module:         \arithmetics
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\add_test_4.$proc$/openlane/designs/add_test_4/test_add_4.v:19$1'.

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\add_test_4.\res_r' using process `\add_test_4.$proc$/openlane/designs/add_test_4/test_add_4.v:19$1'.
  created $dff cell `$procdff$297' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `add_test_4.$proc$/openlane/designs/add_test_4/test_add_4.v:19$1'.
Cleaned up 0 empty switches.

17. Executing OPT_EXPR pass (perform const folding).
Optimizing module arithmetics.
<suppressed ~4 debug messages>
Optimizing module add_16.
Optimizing module add_test_4.

18. Executing FLATTEN pass (flatten design).
Deleting now unused module arithmetics.
Deleting now unused module add_16.
<suppressed ~9 debug messages>

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.
<suppressed ~122 debug messages>

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..
Removed 371 unused cells and 787 unused wires.
<suppressed ~391 debug messages>

21. Executing CHECK pass (checking for obvious problems).
Checking module add_test_4...
Found and reported 0 problems.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
<suppressed ~270 debug messages>
Removed a total of 90 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_4.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..
Removed 0 unused cells and 91 unused wires.
<suppressed ~2 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_4.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_4.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module add_test_4:
  created 0 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_4.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.
<suppressed ~9 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_4.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~490 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\add_test_4' to `<abc-temp-dir>/input.blif'..
Extracted 416 gates and 480 wires to a netlist network with 64 inputs and 32 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       28
ABC RESULTS:               NOR cells:       13
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               MUX cells:       36
ABC RESULTS:               AND cells:      128
ABC RESULTS:                OR cells:      138
ABC RESULTS:        internal signals:      384
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       32
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..
Removed 0 unused cells and 476 unused wires.
<suppressed ~207 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \add_test_4

40.2. Analyzing design hierarchy..
Top module:  \add_test_4
Removed 0 unused modules.

41. Printing statistics.

=== add_test_4 ===

   Number of wires:                500
   Number of wire bits:            925
   Number of public wires:         185
   Number of public wire bits:     610
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                379
     $_ANDNOT_                      28
     $_AND_                        128
     $_DFF_P_                       32
     $_MUX_                         36
     $_NOR_                         13
     $_NOT_                          4
     $_OR_                         138

42. Executing CHECK pass (checking for obvious problems).
Checking module add_test_4...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/add_test_4/runs/RUN_2023.04.16_12.58.38/tmp/synthesis/post_techmap.dot'.
Dumping module add_test_4 to page 1.

44. Executing OPT pass (performing simple optimizations).

44.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

44.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

44.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

44.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_4.
Performed a total of 0 changes.

44.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_4'.
Removed a total of 0 cells.

44.6. Executing OPT_DFF pass (perform DFF optimizations).

44.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..

44.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_4.

44.9. Finished OPT passes. (There is nothing left to do.)

45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..
Removed 0 unused cells and 170 unused wires.
<suppressed ~170 debug messages>

46. Printing statistics.

=== add_test_4 ===

   Number of wires:                330
   Number of wire bits:            472
   Number of public wires:          15
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                379
     $_ANDNOT_                      28
     $_AND_                        128
     $_DFF_P_                       32
     $_MUX_                         36
     $_NOR_                         13
     $_NOT_                          4
     $_OR_                         138

mapping tbuf

47. Executing TECHMAP pass (map to technology primitives).

47.1. Executing Verilog-2005 frontend: /home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

51.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\add_test_4':
  mapped 32 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

52. Printing statistics.

=== add_test_4 ===

   Number of wires:                330
   Number of wire bits:            472
   Number of public wires:          15
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                379
     $_ANDNOT_                      28
     $_AND_                        128
     $_MUX_                         36
     $_NOR_                         13
     $_NOT_                          4
     $_OR_                         138
     sky130_fd_sc_hd__dfxtp_2       32

[INFO]: USING STRATEGY DELAY 4

53. Executing ABC pass (technology mapping using ABC).

53.1. Extracting gate netlist of module `\add_test_4' to `/tmp/yosys-abc-owpVES/input.blif'..
Extracted 347 gates and 411 wires to a netlist network with 64 inputs and 32 outputs.

53.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-owpVES/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-owpVES/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-owpVES/input.blif 
ABC: + read_lib -w /openlane/designs/add_test_4/runs/RUN_2023.04.16_12.58.38/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/add_test_4/runs/RUN_2023.04.16_12.58.38/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    9.54 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/add_test_4/runs/RUN_2023.04.16_12.58.38/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/add_test_4/runs/RUN_2023.04.16_12.58.38/tmp/synthesis/synthesis.sdc 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + &get -n 
ABC: + &st 
ABC: + &syn2 
ABC: + &if -g -K 6 
ABC: + &synch2 
ABC: + &nf 
ABC: + &put 
ABC: + &get -n 
ABC: + &st 
ABC: + &syn2 
ABC: + &if -g -K 6 
ABC: + &synch2 
ABC: + &nf 
ABC: + &put 
ABC: + &get -n 
ABC: + &st 
ABC: + &syn2 
ABC: + &if -g -K 6 
ABC: + &synch2 
ABC: + &nf 
ABC: + &put 
ABC: + &get -n 
ABC: + &st 
ABC: + &syn2 
ABC: + &if -g -K 6 
ABC: + &synch2 
ABC: + &nf 
ABC: + &put 
ABC: + &get -n 
ABC: + &st 
ABC: + &syn2 
ABC: + &if -g -K 6 
ABC: + &synch2 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -c -N 10 
ABC: + topo 
ABC: + stime -c 
ABC: WireLoad = "Small"  Gates =    162 ( 17.3 %)   Cap = 11.3 ff ( 12.6 %)   Area =     1731.66 ( 79.0 %)   Delay =  1828.87 ps  ( 19.1 %)               
ABC: + upsize -c 
ABC: + dnsize -c 
ABC: + 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    162 ( 17.3 %)   Cap = 10.5 ff (  7.3 %)   Area =     1572.76 ( 82.1 %)   Delay =  1604.58 ps  ( 25.3 %)               
ABC: Path  0 --      51 : 0    5 pi                       A =   0.00  Df =  39.0  -22.6 ps  S =  59.7 ps  Cin =  0.0 ff  Cout =  11.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     122 : 2    2 sky130_fd_sc_hd__and2_2  A =   7.51  Df = 202.6  -12.1 ps  S =  58.0 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 303.0 ff  G =  456  
ABC: Path  2 --     124 : 4    6 sky130_fd_sc_hd__o31ai_2 A =  12.51  Df = 542.5 -263.0 ps  S = 398.3 ps  Cin =  4.4 ff  Cout =  16.6 ff  Cmax =  80.6 ff  G =  362  
ABC: Path  3 --     127 : 3    3 sky130_fd_sc_hd__or3_4   A =  11.26  Df = 763.7  -86.5 ps  S =  79.0 ps  Cin =  2.4 ff  Cout =  12.3 ff  Cmax = 531.9 ff  G =  497  
ABC: Path  4 --     134 : 4    5 sky130_fd_sc_hd__a31o_4  A =  17.52  Df =1019.1  -70.0 ps  S =  76.5 ps  Cin =  4.6 ff  Cout =  18.2 ff  Cmax = 499.0 ff  G =  376  
ABC: Path  5 --     142 : 3    4 sky130_fd_sc_hd__o21a_4  A =  15.01  Df =1177.3   -9.7 ps  S =  80.4 ps  Cin =  4.6 ff  Cout =  21.5 ff  Cmax = 510.0 ff  G =  447  
ABC: Path  6 --     143 : 3    1 sky130_fd_sc_hd__mux2_4  A =  15.01  Df =1465.3  -78.4 ps  S =  51.9 ps  Cin =  3.2 ff  Cout =   4.9 ff  Cmax = 536.5 ff  G =  142  
ABC: Path  7 --     144 : 1    1 sky130_fd_sc_hd__buf_6   A =  11.26  Df =1604.6  -94.8 ps  S =  77.4 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 785.5 ff  G =  723  
ABC: Start-point = pi50 (\r1 [3]).  End-point = po0 (\a1.a8.output_reg [1]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   64/   32  lat =    0  nd =   162  edge =    523  area =1572.65  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-owpVES/output.blif 

53.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or3_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a31o_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__mux2_4 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:        4
ABC RESULTS:        internal signals:      315
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       32
Removing temp directory.

54. Executing SETUNDEF pass (replace undef values with defined constants).

55. Executing HILOMAP pass (mapping to constant drivers).

56. Executing SPLITNETS pass (splitting up multi-bit signals).

57. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_4..
Removed 22 unused cells and 461 unused wires.
<suppressed ~51 debug messages>

58. Executing INSBUF pass (insert buffer cells for connected wires).

59. Executing CHECK pass (checking for obvious problems).
Checking module add_test_4...
Warning: Wire add_test_4.\res_r [31] is used but has no driver.
Warning: Wire add_test_4.\res_r [30] is used but has no driver.
Warning: Wire add_test_4.\res_r [29] is used but has no driver.
Warning: Wire add_test_4.\res_r [28] is used but has no driver.
Warning: Wire add_test_4.\res_r [27] is used but has no driver.
Warning: Wire add_test_4.\res_r [26] is used but has no driver.
Warning: Wire add_test_4.\res_r [25] is used but has no driver.
Warning: Wire add_test_4.\res_r [24] is used but has no driver.
Warning: Wire add_test_4.\res_r [23] is used but has no driver.
Warning: Wire add_test_4.\res_r [22] is used but has no driver.
Warning: Wire add_test_4.\res_r [21] is used but has no driver.
Warning: Wire add_test_4.\res_r [20] is used but has no driver.
Warning: Wire add_test_4.\res_r [19] is used but has no driver.
Warning: Wire add_test_4.\res_r [18] is used but has no driver.
Warning: Wire add_test_4.\res_r [17] is used but has no driver.
Warning: Wire add_test_4.\res_r [16] is used but has no driver.
Warning: Wire add_test_4.\res_r [15] is used but has no driver.
Warning: Wire add_test_4.\res_r [14] is used but has no driver.
Warning: Wire add_test_4.\res_r [13] is used but has no driver.
Warning: Wire add_test_4.\res_r [12] is used but has no driver.
Warning: Wire add_test_4.\res_r [11] is used but has no driver.
Warning: Wire add_test_4.\res_r [10] is used but has no driver.
Warning: Wire add_test_4.\res_r [9] is used but has no driver.
Warning: Wire add_test_4.\res_r [8] is used but has no driver.
Warning: Wire add_test_4.\res_r [7] is used but has no driver.
Warning: Wire add_test_4.\res_r [6] is used but has no driver.
Warning: Wire add_test_4.\res_r [5] is used but has no driver.
Warning: Wire add_test_4.\res_r [4] is used but has no driver.
Warning: Wire add_test_4.\res_r [3] is used but has no driver.
Warning: Wire add_test_4.\res_r [2] is used but has no driver.
Warning: Wire add_test_4.\res_r [1] is used but has no driver.
Warning: Wire add_test_4.\res_r [0] is used but has no driver.
Found and reported 32 problems.

60. Printing statistics.

=== add_test_4 ===

   Number of wires:                166
   Number of wire bits:            259
   Number of public wires:          36
   Number of public wire bits:     129
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                194
     sky130_fd_sc_hd__a211o_2       13
     sky130_fd_sc_hd__a21bo_2        2
     sky130_fd_sc_hd__a21oi_2        2
     sky130_fd_sc_hd__a221o_2       23
     sky130_fd_sc_hd__a221oi_2       2
     sky130_fd_sc_hd__a22o_2        35
     sky130_fd_sc_hd__a2bb2o_4       1
     sky130_fd_sc_hd__a31o_4         1
     sky130_fd_sc_hd__and2_2         6
     sky130_fd_sc_hd__and2_4         1
     sky130_fd_sc_hd__and2b_2        2
     sky130_fd_sc_hd__buf_1         11
     sky130_fd_sc_hd__buf_2         12
     sky130_fd_sc_hd__buf_6          4
     sky130_fd_sc_hd__dfxtp_2       32
     sky130_fd_sc_hd__inv_2          1
     sky130_fd_sc_hd__mux2_2        19
     sky130_fd_sc_hd__mux2_4         8
     sky130_fd_sc_hd__nand2_2        3
     sky130_fd_sc_hd__o21a_2         1
     sky130_fd_sc_hd__o21a_4         1
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__o2bb2a_2       1
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__o31ai_2        2
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__or2_2          4
     sky130_fd_sc_hd__or3_2          2
     sky130_fd_sc_hd__or3_4          1

   Chip area for module '\add_test_4': 2253.411200

61. Executing Verilog backend.
Dumping module `\add_test_4'.

Warnings: 32 unique messages, 32 total
End of script. Logfile hash: f9d660f641, CPU: user 1.13s system 0.04s, MEM: 29.40 MB peak
Yosys 0.27+30 (git sha1 101075611fc, gcc 8.3.1 -fPIC -Os)
Time spent: 36% 2x abc (0 sec), 17% 16x opt_expr (0 sec), ...
