
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+30 (git sha1 101075611fc, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/add_test_6/test_add_6.v
Parsing SystemVerilog input from `/openlane/designs/add_test_6/test_add_6.v' to AST representation.
Generating RTLIL representation for module `\add_test_6'.
Generating RTLIL representation for module `\add_16'.
Generating RTLIL representation for module `\arithmetics'.
Generating RTLIL representation for module `\converter_16'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/add_test_6/runs/RUN_2023.04.17_14.49.02/tmp/synthesis/hierarchy.dot'.
Dumping module add_test_6 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \add_test_6
Used module:     \converter_16
Used module:     \add_16
Used module:         \arithmetics

3.2. Analyzing design hierarchy..
Top module:  \add_test_6
Used module:     \converter_16
Used module:     \add_16
Used module:         \arithmetics
Removed 0 unused modules.
Mapping positional arguments of cell add_16.a4 (arithmetics).
Mapping positional arguments of cell add_16.a3 (arithmetics).
Mapping positional arguments of cell add_16.a2 (arithmetics).
Mapping positional arguments of cell add_16.a1 (arithmetics).
Mapping positional arguments of cell add_test_6.c2 (converter_16).
Mapping positional arguments of cell add_test_6.a1 (add_16).

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \add_test_6
Used module:     \converter_16
Used module:     \add_16
Used module:         \arithmetics

5.2. Analyzing design hierarchy..
Top module:  \add_test_6
Used module:     \converter_16
Used module:     \add_16
Used module:         \arithmetics
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

9. Executing PROC_INIT pass (extract init attributes).

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\add_test_6.$proc$/openlane/designs/add_test_6/test_add_6.v:20$1'.

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\add_test_6.\res_r' using process `\add_test_6.$proc$/openlane/designs/add_test_6/test_add_6.v:20$1'.
  created $dff cell `$procdff$2229' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `add_test_6.$proc$/openlane/designs/add_test_6/test_add_6.v:20$1'.
Cleaned up 0 empty switches.

17. Executing OPT_EXPR pass (perform const folding).
Optimizing module converter_16.
<suppressed ~8 debug messages>
Optimizing module arithmetics.
<suppressed ~28 debug messages>
Optimizing module add_16.
Optimizing module add_test_6.

18. Executing FLATTEN pass (flatten design).
Deleting now unused module converter_16.
Deleting now unused module arithmetics.
Deleting now unused module add_16.
<suppressed ~6 debug messages>

19. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.
<suppressed ~250 debug messages>

20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..
Removed 3696 unused cells and 5403 unused wires.
<suppressed ~3714 debug messages>

21. Executing CHECK pass (checking for obvious problems).
Checking module add_test_6...
Found and reported 0 problems.

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
<suppressed ~1896 debug messages>
Removed a total of 632 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~128 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_6.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..
Removed 0 unused cells and 632 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~128 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_6.
Performed a total of 0 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

22.16. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~128 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_6.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:983$2099 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:982$2097 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:981$2095 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:980$2093 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:979$2091 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:978$2089 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:977$2087 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:967$2067 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:966$2065 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:965$2063 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:964$2061 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:963$2059 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:962$2057 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:961$2055 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:951$2035 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:950$2033 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:949$2031 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:948$2029 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:947$2027 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:946$2025 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:945$2023 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:935$2003 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:934$2001 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:933$1999 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:932$1997 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:931$1995 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:930$1993 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:929$1991 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:919$1971 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:918$1969 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:917$1967 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:916$1965 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:915$1963 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:914$1961 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:913$1959 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:903$1939 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:902$1937 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:901$1935 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:900$1933 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:899$1931 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:898$1929 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:897$1927 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:887$1907 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:886$1905 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:885$1903 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:884$1901 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:883$1899 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:882$1897 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:881$1895 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:871$1875 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:870$1873 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:869$1871 ($eq).
Removed top 1 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:868$1869 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:867$1867 ($eq).
Removed top 2 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:866$1865 ($eq).
Removed top 3 bits (of 4) from port B of cell add_test_6.$flatten\c2.$eq$/openlane/designs/add_test_6/test_add_6.v:865$1863 ($eq).

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module add_test_6:
  created 0 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_6..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~128 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_6.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.
<suppressed ~142 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_6.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

35.10. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~3051 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.
<suppressed ~480 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
<suppressed ~1248 debug messages>
Removed a total of 416 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..
Removed 0 unused cells and 536 unused wires.
<suppressed ~1 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\add_test_6' to `<abc-temp-dir>/input.blif'..
Extracted 3201 gates and 3233 wires to a netlist network with 32 inputs and 16 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:             ORNOT cells:       29
ABC RESULTS:              NAND cells:       13
ABC RESULTS:               NOT cells:        3
ABC RESULTS:               MUX cells:       49
ABC RESULTS:               AND cells:      689
ABC RESULTS:               NOR cells:      109
ABC RESULTS:            ANDNOT cells:      697
ABC RESULTS:                OR cells:     1362
ABC RESULTS:        internal signals:     3185
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.
<suppressed ~2 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..
Removed 1 unused cells and 3075 unused wires.
<suppressed ~1162 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \add_test_6

40.2. Analyzing design hierarchy..
Top module:  \add_test_6
Removed 0 unused modules.

41. Printing statistics.

=== add_test_6 ===

   Number of wires:               3222
   Number of wire bits:           3764
   Number of public wires:         288
   Number of public wire bits:     830
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2966
     $_ANDNOT_                     697
     $_AND_                        689
     $_DFF_P_                       16
     $_MUX_                         49
     $_NAND_                        13
     $_NOR_                        109
     $_NOT_                          2
     $_ORNOT_                       29
     $_OR_                        1362

42. Executing CHECK pass (checking for obvious problems).
Checking module add_test_6...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/add_test_6/runs/RUN_2023.04.17_14.49.02/tmp/synthesis/post_techmap.dot'.
Dumping module add_test_6 to page 1.

44. Executing OPT pass (performing simple optimizations).

44.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

44.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

44.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \add_test_6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

44.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \add_test_6.
Performed a total of 0 changes.

44.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\add_test_6'.
Removed a total of 0 cells.

44.6. Executing OPT_DFF pass (perform DFF optimizations).

44.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..

44.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module add_test_6.

44.9. Finished OPT passes. (There is nothing left to do.)

45. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..
Removed 0 unused cells and 283 unused wires.
<suppressed ~283 debug messages>

46. Printing statistics.

=== add_test_6 ===

   Number of wires:               2939
   Number of wire bits:           2999
   Number of public wires:           5
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2966
     $_ANDNOT_                     697
     $_AND_                        689
     $_DFF_P_                       16
     $_MUX_                         49
     $_NAND_                        13
     $_NOR_                        109
     $_NOT_                          2
     $_ORNOT_                       29
     $_OR_                        1362

mapping tbuf

47. Executing TECHMAP pass (map to technology primitives).

47.1. Executing Verilog-2005 frontend: /home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

47.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

48. Executing SIMPLEMAP pass (map simple cells to gate primitives).

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/unix/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

51.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\add_test_6':
  mapped 16 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

52. Printing statistics.

=== add_test_6 ===

   Number of wires:               2939
   Number of wire bits:           2999
   Number of public wires:           5
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2966
     $_ANDNOT_                     697
     $_AND_                        689
     $_MUX_                         49
     $_NAND_                        13
     $_NOR_                        109
     $_NOT_                          2
     $_ORNOT_                       29
     $_OR_                        1362
     sky130_fd_sc_hd__dfxtp_2       16

[INFO]: USING STRATEGY AREA 3

53. Executing ABC pass (technology mapping using ABC).

53.1. Extracting gate netlist of module `\add_test_6' to `/tmp/yosys-abc-yN1sw2/input.blif'..
Extracted 2950 gates and 2982 wires to a netlist network with 32 inputs and 16 outputs.

53.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-yN1sw2/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-yN1sw2/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-yN1sw2/input.blif 
ABC: + read_lib -w /openlane/designs/add_test_6/runs/RUN_2023.04.17_14.49.02/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.07 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/add_test_6/runs/RUN_2023.04.17_14.49.02/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    9.54 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/add_test_6/runs/RUN_2023.04.17_14.49.02/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/add_test_6/runs/RUN_2023.04.17_14.49.02/tmp/synthesis/synthesis.sdc 
ABC: + strash 
ABC: + dch 
ABC: + map -B 0.9 
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: + topo 
ABC: + stime -c 
ABC: WireLoad = "Small"  Gates =   1812 (  8.1 %)   Cap = 10.0 ff (  1.0 %)   Area =    13521.72 ( 91.9 %)   Delay =  2756.73 ps  ( 10.3 %)               
ABC: + buffer -c -N 10 
ABC: + upsize -c 
ABC: + dnsize -c 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   1935 ( 13.9 %)   Cap =  9.1 ff (  3.1 %)   Area =    14264.93 ( 86.0 %)   Delay =  2067.76 ps  (  5.0 %)               
ABC: Path  0 --       6 : 0    8 pi                        A =   0.00  Df = 163.6  -88.5 ps  S = 239.6 ps  Cin =  0.0 ff  Cout =  51.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      51 : 1    2 sky130_fd_sc_hd__inv_4    A =   6.26  Df = 248.0  -62.2 ps  S =  85.2 ps  Cin =  9.0 ff  Cout =  26.9 ff  Cmax = 563.1 ff  G =  285  
ABC: Path  2 --      52 : 2    8 sky130_fd_sc_hd__nand2_4  A =  11.26  Df = 361.2  -90.8 ps  S = 109.6 ps  Cin =  8.7 ff  Cout =  31.0 ff  Cmax = 530.1 ff  G =  338  
ABC: Path  3 --     101 : 2    4 sky130_fd_sc_hd__nor2_2   A =   6.26  Df = 498.9  -61.1 ps  S = 224.5 ps  Cin =  4.4 ff  Cout =  18.6 ff  Cmax = 141.9 ff  G =  405  
ABC: Path  4 --     161 : 1   10 sky130_fd_sc_hd__buf_6    A =  11.26  Df = 687.8  -89.9 ps  S = 101.4 ps  Cin =  4.6 ff  Cout =  45.6 ff  Cmax = 785.5 ff  G =  945  
ABC: Path  5 --     175 : 2    2 sky130_fd_sc_hd__nand2_2  A =   6.26  Df = 773.0 -104.0 ps  S =  52.8 ps  Cin =  4.4 ff  Cout =   6.2 ff  Cmax = 295.7 ff  G =  134  
ABC: Path  6 --     176 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df = 838.7 -120.3 ps  S =  45.6 ps  Cin =  4.4 ff  Cout =   4.7 ff  Cmax = 295.7 ff  G =  100  
ABC: Path  7 --     177 : 2    1 sky130_fd_sc_hd__nor2_2   A =   6.26  Df = 871.3  -75.7 ps  S =  80.0 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 141.9 ff  G =  100  
ABC: Path  8 --     186 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df = 925.8  -80.1 ps  S =  45.0 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 295.7 ff  G =   99  
ABC: Path  9 --     207 : 2    1 sky130_fd_sc_hd__nor2_2   A =   6.26  Df = 962.8  -17.0 ps  S =  78.7 ps  Cin =  4.4 ff  Cout =   4.4 ff  Cmax = 141.9 ff  G =   98  
ABC: Path 10 --     265 : 3    5 sky130_fd_sc_hd__nand3_2  A =  10.01  Df =1092.7  -22.3 ps  S = 134.9 ps  Cin =  4.4 ff  Cout =  21.7 ff  Cmax = 260.0 ff  G =  458  
ABC: Path 11 --    1025 : 3    1 sky130_fd_sc_hd__o21bai_4 A =  18.77  Df =1226.5  -55.9 ps  S = 121.2 ps  Cin =  6.6 ff  Cout =   9.3 ff  Cmax = 245.4 ff  G =  134  
ABC: Path 12 --    1026 : 2    6 sky130_fd_sc_hd__nand2_4  A =  11.26  Df =1334.1  -35.6 ps  S = 127.7 ps  Cin =  8.7 ff  Cout =  37.7 ff  Cmax = 530.1 ff  G =  418  
ABC: Path 13 --    1133 : 2   10 sky130_fd_sc_hd__nand2_8  A =  20.02  Df =1452.2  -54.1 ps  S = 110.3 ps  Cin = 17.1 ff  Cout =  48.8 ff  Cmax = 933.8 ff  G =  279  
ABC: Path 14 --    1323 : 2    4 sky130_fd_sc_hd__nand2_4  A =  11.26  Df =1528.3  -36.2 ps  S =  82.3 ps  Cin =  8.7 ff  Cout =  18.5 ff  Cmax = 530.1 ff  G =  206  
ABC: Path 15 --    1540 : 1   10 sky130_fd_sc_hd__buf_6    A =  11.26  Df =1688.7  -44.9 ps  S = 100.2 ps  Cin =  4.6 ff  Cout =  45.6 ff  Cmax = 785.5 ff  G =  958  
ABC: Path 16 --    1712 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =1745.4  -46.5 ps  S =  45.3 ps  Cin =  4.4 ff  Cout =   4.7 ff  Cmax = 295.7 ff  G =  102  
ABC: Path 17 --    1714 : 3    1 sky130_fd_sc_hd__nand3b_2 A =  11.26  Df =1814.3  -47.0 ps  S =  68.0 ps  Cin =  3.5 ff  Cout =   4.6 ff  Cmax = 263.7 ff  G =  126  
ABC: Path 18 --    1715 : 2    1 sky130_fd_sc_hd__nor2_2   A =   6.26  Df =1927.9  -38.1 ps  S =  80.9 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 141.9 ff  G =   99  
ABC: Path 19 --    1716 : 2    1 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =2067.8  -22.8 ps  S = 185.8 ps  Cin =  4.4 ff  Cout =  33.4 ff  Cmax = 295.7 ff  G =  755  
ABC: Start-point = pi5 (\r2 [1]).  End-point = po9 (\c2.r_res_binary [13]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   32/   16  lat =    0  nd =  1935  edge =   4613  area =14268.17  delay =1268.10  lev = 22
ABC: + write_blif /tmp/yosys-abc-yN1sw2/output.blif 

53.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21bai_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_8 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_4 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor2_4 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nand2_4 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:       26
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       75
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       56
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:       62
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      145
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       63
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:       40
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       69
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:       45
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      295
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       43
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      728
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        8
ABC RESULTS:        internal signals:     2934
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       16
Removing temp directory.

54. Executing SETUNDEF pass (replace undef values with defined constants).

55. Executing HILOMAP pass (mapping to constant drivers).

56. Executing SPLITNETS pass (splitting up multi-bit signals).

57. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \add_test_6..
Removed 0 unused cells and 2982 unused wires.
<suppressed ~1 debug messages>

58. Executing INSBUF pass (insert buffer cells for connected wires).

59. Executing CHECK pass (checking for obvious problems).
Checking module add_test_6...
Warning: Wire add_test_6.\res_r [15] is used but has no driver.
Warning: Wire add_test_6.\res_r [14] is used but has no driver.
Warning: Wire add_test_6.\res_r [13] is used but has no driver.
Warning: Wire add_test_6.\res_r [12] is used but has no driver.
Warning: Wire add_test_6.\res_r [11] is used but has no driver.
Warning: Wire add_test_6.\res_r [10] is used but has no driver.
Warning: Wire add_test_6.\res_r [9] is used but has no driver.
Warning: Wire add_test_6.\res_r [8] is used but has no driver.
Warning: Wire add_test_6.\res_r [7] is used but has no driver.
Warning: Wire add_test_6.\res_r [6] is used but has no driver.
Warning: Wire add_test_6.\res_r [5] is used but has no driver.
Warning: Wire add_test_6.\res_r [4] is used but has no driver.
Warning: Wire add_test_6.\res_r [3] is used but has no driver.
Warning: Wire add_test_6.\res_r [2] is used but has no driver.
Warning: Wire add_test_6.\res_r [1] is used but has no driver.
Warning: Wire add_test_6.\res_r [0] is used but has no driver.
Found and reported 16 problems.

60. Printing statistics.

=== add_test_6 ===

   Number of wires:               1939
   Number of wire bits:           1984
   Number of public wires:          20
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1951
     sky130_fd_sc_hd__a211o_2        6
     sky130_fd_sc_hd__a211oi_2      19
     sky130_fd_sc_hd__a21bo_2        3
     sky130_fd_sc_hd__a21o_2         3
     sky130_fd_sc_hd__a21oi_2       19
     sky130_fd_sc_hd__a221o_2        3
     sky130_fd_sc_hd__a221oi_2      62
     sky130_fd_sc_hd__a22o_2        56
     sky130_fd_sc_hd__a22oi_2       10
     sky130_fd_sc_hd__and2_2        69
     sky130_fd_sc_hd__and2_4         1
     sky130_fd_sc_hd__and2b_2        4
     sky130_fd_sc_hd__and3_2        38
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2        45
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1         75
     sky130_fd_sc_hd__buf_2         26
     sky130_fd_sc_hd__buf_4         14
     sky130_fd_sc_hd__buf_6          8
     sky130_fd_sc_hd__dfxtp_2       16
     sky130_fd_sc_hd__inv_2        145
     sky130_fd_sc_hd__inv_4          1
     sky130_fd_sc_hd__nand2_2      728
     sky130_fd_sc_hd__nand2_4        9
     sky130_fd_sc_hd__nand2_8        2
     sky130_fd_sc_hd__nand3_2       43
     sky130_fd_sc_hd__nand3b_2       8
     sky130_fd_sc_hd__nor2_2       295
     sky130_fd_sc_hd__nor2_4        10
     sky130_fd_sc_hd__nor2b_2        3
     sky130_fd_sc_hd__nor3_2        13
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o2111a_2      40
     sky130_fd_sc_hd__o2111ai_2     12
     sky130_fd_sc_hd__o211a_2       15
     sky130_fd_sc_hd__o211ai_2       6
     sky130_fd_sc_hd__o21a_2        12
     sky130_fd_sc_hd__o21ai_2       63
     sky130_fd_sc_hd__o21bai_2       1
     sky130_fd_sc_hd__o21bai_4       1
     sky130_fd_sc_hd__o221a_2       23
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        13
     sky130_fd_sc_hd__o22ai_2        4
     sky130_fd_sc_hd__o2bb2a_2       3
     sky130_fd_sc_hd__o2bb2ai_2      3
     sky130_fd_sc_hd__o311a_2        5
     sky130_fd_sc_hd__or2_2          3
     sky130_fd_sc_hd__or2_4          1
     sky130_fd_sc_hd__or2b_2         2
     sky130_fd_sc_hd__or3_2          5

   Chip area for module '\add_test_6': 14605.257600

61. Executing Verilog backend.
Dumping module `\add_test_6'.

Warnings: 16 unique messages, 16 total
End of script. Logfile hash: cef94d335e, CPU: user 6.97s system 9.36s, MEM: 91.46 MB peak
Yosys 0.27+30 (git sha1 101075611fc, gcc 8.3.1 -fPIC -Os)
Time spent: 39% 1x flatten (10 sec), 38% 2x abc (10 sec), ...
